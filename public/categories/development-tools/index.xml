<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development Tools on BRYSGO</title>
    <link>http://brysgo.com/categories/development-tools/</link>
    <description>Recent content in Development Tools on BRYSGO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Dec 2015 13:41:33 +0000</lastBuildDate>
    
	<atom:link href="http://brysgo.com/categories/development-tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GraphiQL Bookmarklet</title>
      <link>http://brysgo.com/2015/12/19/graphiql-bookmarklet/</link>
      <pubDate>Sat, 19 Dec 2015 13:41:33 +0000</pubDate>
      
      <guid>http://brysgo.com/2015/12/19/graphiql-bookmarklet/</guid>
      <description> I&amp;rsquo;m sure most of you, if you have done any work with graphql, have heard of graphiql. It is an indespensible tool for writing and testing graphql queries.
The problem is that now that I&amp;rsquo;m not using express at the moment. I don&amp;rsquo;t want to go through the trouble of trying to fit graphiql into my stack.
To solve it, a graphiql bookmarklet:  Enjoy! </description>
    </item>
    
    <item>
      <title>jscodemigrate (deps|dependencies)</title>
      <link>http://brysgo.com/2015/12/11/jscodemigrate-deps/</link>
      <pubDate>Fri, 11 Dec 2015 00:09:33 +0000</pubDate>
      
      <guid>http://brysgo.com/2015/12/11/jscodemigrate-deps/</guid>
      <description>If you haven&amp;rsquo;t yet read about jscodemigrate, read about it here. If you already know about jscodemigrate then stick around because there is a new feature, and it is ready for you to use, just npm install jscodemigrate@latest --save-dev.
You already know that you can run all of your jscodeshift scripts at once and easily maintain your project with a directory full of timestamped codemods, but now, you can make it easy for those who depend on your npm packages to respond quickly to your API changes.</description>
    </item>
    
    <item>
      <title>jscodeshift &#43; rails migrations = jscodemigrate</title>
      <link>http://brysgo.com/2015/12/05/jscodemigrate/</link>
      <pubDate>Sat, 05 Dec 2015 00:09:33 +0000</pubDate>
      
      <guid>http://brysgo.com/2015/12/05/jscodemigrate/</guid>
      <description>I&amp;rsquo;ve worked on lots of projects big and small, but as time went on they all suffered from the same problem. Changing standards and updated api&amp;rsquo;s left code fragmented as the codebase grew.
From the time I started working on coffeelint, the problem has been stewing in my head. Subconciously on the lookout for a solution, I heard about codemods. Let me preface by saying I&amp;rsquo;ve been quite obsessed with everything facebook engineering has been doing in open source lately.</description>
    </item>
    
    <item>
      <title>React Native on Heroku</title>
      <link>http://brysgo.com/2015/07/26/react-native-on-heroku/</link>
      <pubDate>Sun, 26 Jul 2015 00:09:33 +0000</pubDate>
      
      <guid>http://brysgo.com/2015/07/26/react-native-on-heroku/</guid>
      <description>As a web developer doing iOS development with react native, I need a staging environment for the product manager to review changes to the app.
On the web, that means using Heroku, but with a react native app it is a bit more complicated.
My react native app has two components, the packager (for serving the client code) and the server (for interacting with the app).
Heroku only lets one process bind to an external port, so it wasn&amp;rsquo;t easy to do without creating two heroku apps.</description>
    </item>
    
    <item>
      <title>Searching for an Isomorphic Reactiflux Stack</title>
      <link>http://brysgo.com/2015/06/17/isomorphic-react-flux-stack/</link>
      <pubDate>Wed, 17 Jun 2015 10:07:43 +0000</pubDate>
      
      <guid>http://brysgo.com/2015/06/17/isomorphic-react-flux-stack/</guid>
      <description>Now that Relay is out in preview, it will probably replace Flux entirely.
 Why React? A few months ago, the release of React Native by Facebook convinced me to make the leap to React.
I spent a while working on a React Native app and quickly learned that I needed to bring in Flux. After watching a few videos and reading a few blogs, I added my own implementation of flux to my react native app.</description>
    </item>
    
    <item>
      <title>Web Development on a Nexus 9</title>
      <link>http://brysgo.com/2015/03/11/web-development-on-a-nexus-9/</link>
      <pubDate>Wed, 11 Mar 2015 10:41:18 +0000</pubDate>
      
      <guid>http://brysgo.com/2015/03/11/web-development-on-a-nexus-9/</guid>
      <description>I recently did something a little crazy. I am a professional web developer, and I decided I was going to move all of my development to the cloud. This paradigm that has brought so much convenience into every corner of my life was going to close the final gap. It took me a little while, but I have 99% percent of what I had going on my Macbook Pro, so here is my setup.</description>
    </item>
    
    <item>
      <title>Teaspoon with Capybara-Webkit</title>
      <link>http://brysgo.com/2015/01/02/teaspoon-with-capybara-webkit/</link>
      <pubDate>Fri, 02 Jan 2015 11:00:38 +0000</pubDate>
      
      <guid>http://brysgo.com/2015/01/02/teaspoon-with-capybara-webkit/</guid>
      <description>Do you use teaspoon to run your javascript tests?
Do you use Capybara-Webkit to run your feature tests?
Now you can run your teaspoon suite faster without having to install and boot up phantomjs. Just use the new Capybara-Webkit driver for teaspoon! You may also have more success with it on your CI server, as that is what caused us to make this change.</description>
    </item>
    
  </channel>
</rss>