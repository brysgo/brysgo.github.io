<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on BRYSGO</title><link>//www.brysgo.com/tags/development/</link><description>Recent content in development on BRYSGO</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Aug 2020 08:05:02 +0000</lastBuildDate><atom:link href="//www.brysgo.com/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>coming soon: peerstate</title><link>//www.brysgo.com/post/2020-08-06-coming-soon-peersta-415acc/</link><pubDate>Thu, 06 Aug 2020 08:05:02 +0000</pubDate><guid>//www.brysgo.com/post/2020-08-06-coming-soon-peersta-415acc/</guid><description>All of my open source projects start with trying to build something, getting frustrated, saying in my head &amp;ldquo;I wish I could just do this,&amp;rdquo; then obsessively investigating what it would take to be able to &amp;ldquo;just do this.&amp;rdquo;
Sometimes this inspiration comes on a work project, but more often, it comes when I am working on a side project, or playing with some new open source thing. My first example of such a project, was when I was working on an investment project called Herd.</description></item><item><title>Open Source: Chasing the Dream</title><link>//www.brysgo.com/post/2020-07-31-Open-Source-Chasing-997a1e/</link><pubDate>Fri, 31 Jul 2020 17:04:07 +0000</pubDate><guid>//www.brysgo.com/post/2020-07-31-Open-Source-Chasing-997a1e/</guid><description>I love open source. I love to imagine writing code a certain way, trying to find something that does it, failing to find said thing and building it. I love publishing it and watching people use it. I don&amp;rsquo;t love maintaining it, I don&amp;rsquo;t love the thought of having to improve it with the responsibility involved with making sure those improvements don&amp;rsquo;t break anything for anyone using your thing in a way you didn&amp;rsquo;t intend it to be used.</description></item><item><title>New Landing Page - New Commitment</title><link>//www.brysgo.com/post/2020-07-11-new-landing-page/</link><pubDate>Sat, 11 Jul 2020 07:36:00 +0000</pubDate><guid>//www.brysgo.com/post/2020-07-11-new-landing-page/</guid><description>I&amp;rsquo;ve decided to redo my landing page in response to a realization that I need to sell myself a bit better. While this post isn&amp;rsquo;t related to the topics tagged above, it is a placeholder for my commitment to put some more effort into publishing here.</description></item><item><title>Crystallize your abstractions carefully...</title><link>//www.brysgo.com/2016/06/21/crystallize-carfully/</link><pubDate>Tue, 21 Jun 2016 01:54:33 +0000</pubDate><guid>//www.brysgo.com/2016/06/21/crystallize-carfully/</guid><description>For as long as I&amp;rsquo;ve been a developer I have been reminded of the rule of three for refactoring and every time I hear it, I die a little inside.
If building a new abstraction is so painful, that it is easier to copy and paste large chunks of code, you need to rethink the way you are building your abstractions. Building the right abstractions isn&amp;rsquo;t just a time consuming distraction from building software, it is software engineering.</description></item><item><title>Imaginary Lines</title><link>//www.brysgo.com/2016/04/01/imaginary-lines/</link><pubDate>Fri, 01 Apr 2016 01:13:33 +0000</pubDate><guid>//www.brysgo.com/2016/04/01/imaginary-lines/</guid><description>If I had to sum up the job of a software engineer in laymen&amp;rsquo;s terms, I would tell you that we draw imaginary lines around imaginary concepts until those concepts can map to both a specific set of instructions for a machine and a common understanding for programmers.
Why am I stating the obvious? Well, it is quite simply to emphasize just how important it is where we draw those lines.</description></item><item><title>GraphiQL Bookmarklet</title><link>//www.brysgo.com/2015/12/19/graphiql-bookmarklet/</link><pubDate>Sat, 19 Dec 2015 13:41:33 +0000</pubDate><guid>//www.brysgo.com/2015/12/19/graphiql-bookmarklet/</guid><description>I&amp;rsquo;m sure most of you, if you have done any work with graphql, have heard of graphiql. It is an indespensible tool for writing and testing graphql queries.
The problem is that now that I&amp;rsquo;m not using express at the moment. I don&amp;rsquo;t want to go through the trouble of trying to fit graphiql into my stack.
To solve it, a graphiql bookmarklet: Enjoy!</description></item><item><title>jscodemigrate (deps|dependencies)</title><link>//www.brysgo.com/2015/12/11/jscodemigrate-deps/</link><pubDate>Fri, 11 Dec 2015 00:09:33 +0000</pubDate><guid>//www.brysgo.com/2015/12/11/jscodemigrate-deps/</guid><description>If you haven&amp;rsquo;t yet read about jscodemigrate, read about it here. If you already know about jscodemigrate then stick around because there is a new feature, and it is ready for you to use, just npm install jscodemigrate@latest --save-dev.
You already know that you can run all of your jscodeshift scripts at once and easily maintain your project with a directory full of timestamped codemods, but now, you can make it easy for those who depend on your npm packages to respond quickly to your API changes.</description></item><item><title>jscodeshift + rails migrations = jscodemigrate</title><link>//www.brysgo.com/2015/12/05/jscodemigrate/</link><pubDate>Sat, 05 Dec 2015 00:09:33 +0000</pubDate><guid>//www.brysgo.com/2015/12/05/jscodemigrate/</guid><description>I&amp;rsquo;ve worked on lots of projects big and small, but as time went on they all suffered from the same problem. Changing standards and updated api&amp;rsquo;s left code fragmented as the codebase grew.
From the time I started working on coffeelint, the problem has been stewing in my head. Subconciously on the lookout for a solution, I heard about codemods. Let me preface by saying I&amp;rsquo;ve been quite obsessed with everything facebook engineering has been doing in open source lately.</description></item><item><title>Graphql + Bookshelf</title><link>//www.brysgo.com/2015/08/13/graphql-bookshelf/</link><pubDate>Thu, 13 Aug 2015 00:09:33 +0000</pubDate><guid>//www.brysgo.com/2015/08/13/graphql-bookshelf/</guid><description>I recently switched over the project I was working on from MongoDB to PostgreSQL. The reason for the switch is not what I&amp;rsquo;m writing to discuss, but I&amp;rsquo;ll just say that the unpredictability of mongodb was starting to become an issue in development. The thought was that if it was already difficult before the data starts pouring in, it will probably be a nightmare one the product is in use. And that meant switching from graffiti-mongoose, to my own graphql database glue.</description></item><item><title>React Native on Heroku</title><link>//www.brysgo.com/2015/07/26/react-native-on-heroku/</link><pubDate>Sun, 26 Jul 2015 00:09:33 +0000</pubDate><guid>//www.brysgo.com/2015/07/26/react-native-on-heroku/</guid><description>As a web developer doing iOS development with react native, I need a staging environment for the product manager to review changes to the app.
On the web, that means using Heroku, but with a react native app it is a bit more complicated.
My react native app has two components, the packager (for serving the client code) and the server (for interacting with the app).
Heroku only lets one process bind to an external port, so it wasn&amp;rsquo;t easy to do without creating two heroku apps.</description></item><item><title>Will Relay replace Flux?</title><link>//www.brysgo.com/2015/07/25/relay-vs-flux/</link><pubDate>Sat, 25 Jul 2015 12:59:33 +0000</pubDate><guid>//www.brysgo.com/2015/07/25/relay-vs-flux/</guid><description>Relay is out in preview! Have a look.
When people talk about Relay they think of it as the server-client link in the Facebook stack, but is that really all it is?
Flux still has a place on the client because you need to manage temporary app state, right?
I think it doesn&amp;rsquo;t. Flux is an architecture for unidirectional data flow that separates out input from the user and the server so that it can react without getting tangled up.</description></item><item><title>Why I'm Excited for Facebook's Relay and GraphQL</title><link>//www.brysgo.com/2015/07/08/why-relay/</link><pubDate>Wed, 08 Jul 2015 12:59:33 +0000</pubDate><guid>//www.brysgo.com/2015/07/08/why-relay/</guid><description>Relay is out in preview! Have a look.
I want to tell you in as few words as possible why I am so excited to get my hands on Relay and GraphQL.
React is widely popular because it is simple and declarative, making it very deterministic and easy to work with. React is also fully composable, making it imensly powerful with high potential for writing reusable code.
Relay is a mirror image of React, except instead of composing beautiful views for the web and native mobile devices using JSX, you can compose data from your database for your views using graphql.</description></item><item><title>Bringing back 'Under Construction' in style</title><link>//www.brysgo.com/2015/06/25/under-construction/</link><pubDate>Thu, 25 Jun 2015 10:07:43 +0000</pubDate><guid>//www.brysgo.com/2015/06/25/under-construction/</guid><description>I&amp;rsquo;m just going to go ahead and say what&amp;rsquo;s on everyone&amp;rsquo;s mind already. Where did all those great under construction pages from the 90s go with the animated gifs and text scrolling accross the screen.
Since I know you all missed those pages so much, I brought them back. If you visit any of my websites that I have yet to utilize:
worthy.gift unravel.space solve.technology socrenchus.com stackoverachieve.com stackoverachiever.com You will see an under construction banner that uses HTML5 gradients, text shadow, and of course, a marquee tag.</description></item><item><title>Searching for an Isomorphic Reactiflux Stack</title><link>//www.brysgo.com/2015/06/17/isomorphic-react-flux-stack/</link><pubDate>Wed, 17 Jun 2015 10:07:43 +0000</pubDate><guid>//www.brysgo.com/2015/06/17/isomorphic-react-flux-stack/</guid><description>Now that Relay is out in preview, it will probably replace Flux entirely.
Why React? A few months ago, the release of React Native by Facebook convinced me to make the leap to React.
I spent a while working on a React Native app and quickly learned that I needed to bring in Flux. After watching a few videos and reading a few blogs, I added my own implementation of flux to my react native app.</description></item><item><title>Avoiding Tunnel Vision</title><link>//www.brysgo.com/2015/06/02/avoiding-tunnel-vision/</link><pubDate>Tue, 02 Jun 2015 18:51:37 +0000</pubDate><guid>//www.brysgo.com/2015/06/02/avoiding-tunnel-vision/</guid><description>
&lt;p>
This is a blog post to advocate for something that is generally frowned upon
in software development. If you want to join the angry crowd and throw rotten
tomatoes, you are welcome to.
&lt;/p>
&lt;figure data-orig-width="480" data-orig-height="360" class="tmblr-full">
&lt;img
src="https://36.media.tumblr.com/16e1827841b75b6bd61488f880867af3/tumblr_inline_npca0h9cHd1r60sb8_540.jpg"
data-orig-width="480"
data-orig-height="360"
/>
&lt;/figure></description></item><item><title>Wishlist: Chromebook search/ctrl</title><link>//www.brysgo.com/2015/04/29/chromebook-search-ctrl/</link><pubDate>Wed, 29 Apr 2015 15:11:44 +0000</pubDate><guid>//www.brysgo.com/2015/04/29/chromebook-search-ctrl/</guid><description>In order to do development on my Chromebook, I need to change the search key to a control key. Problem is the search key is really sexy, and while I can make the control key the search key, it just isn&amp;rsquo;t the same. Also, sometimes I actually try and use Ctrl like a control key and everything is wonky.
So here is my request. I want to be able to set the search key to bring up the search if I haven’t pressed any keys in combination with it, but if I have, it should act like a control key.</description></item><item><title>2015 Chromebook Pixel</title><link>//www.brysgo.com/2015/04/29/2015-chromebook-pixel/</link><pubDate>Wed, 29 Apr 2015 15:03:30 +0000</pubDate><guid>//www.brysgo.com/2015/04/29/2015-chromebook-pixel/</guid><description>
&lt;p>
I just got a Chromebook pixel today and it is gorgeous. It embodies simplicity
and minimalism while still being completely functional.
&lt;/p>
&lt;figure class="tmblr-full" data-orig-height="2506" data-orig-width="2306">
&lt;img
src="https://41.media.tumblr.com/3ba69eaeab41e5c7ee1983168c747e9c/tumblr_inline_nnl0vc6MnW1r60sb8_540.jpg"
data-orig-height="2506"
data-orig-width="2306"
/>
&lt;/figure></description></item><item><title>Web Development on a Nexus 9</title><link>//www.brysgo.com/2015/03/11/web-development-on-a-nexus-9/</link><pubDate>Wed, 11 Mar 2015 10:41:18 +0000</pubDate><guid>//www.brysgo.com/2015/03/11/web-development-on-a-nexus-9/</guid><description>
&lt;p>
I recently did something a little crazy. I am a professional web developer,
and I decided I was going to move all of my development to the cloud. This
paradigm that has brought so much convenience into every corner of my life was
going to close the final gap. It took me a little while, but I have 99%
percent of what I had going on my Macbook Pro, so here is my setup.
&lt;/p></description></item><item><title>Teaspoon with Capybara-Webkit</title><link>//www.brysgo.com/2015/01/02/teaspoon-with-capybara-webkit/</link><pubDate>Fri, 02 Jan 2015 11:00:38 +0000</pubDate><guid>//www.brysgo.com/2015/01/02/teaspoon-with-capybara-webkit/</guid><description>Do you use teaspoon to run your javascript tests? Do you use Capybara-Webkitto run your feature tests? Now you can run your teaspoon suite faster without having to install and boot up phantomjs. Just use the new Capybara-Webkit driver for teaspoon!You may also have more success with it on your CI server, as that is what caused us to make this change.</description></item><item><title>Linearly dependant Rspec 'behavior'</title><link>//www.brysgo.com/2014/12/31/linearly-dependant-rspec-behavior/</link><pubDate>Wed, 31 Dec 2014 15:17:00 +0000</pubDate><guid>//www.brysgo.com/2014/12/31/linearly-dependant-rspec-behavior/</guid><description>
&lt;p>
&lt;strong>The problem:&lt;/strong> You finish writing your test in rspec, and after
you have carefully described the scenario, you go to write your next test. For
your next test you need to check that after you do everything for the first
test, the next thing doesn’t break.
&lt;/p>
&lt;p>&lt;strong>Potential hacks:&lt;/strong>&lt;/p>
&lt;p>
a) Well, it is just this one time, I can ignore the description of the spec
and just throw in another assertion after my test.
&lt;/p>
&lt;p>
While you’re at it, why don’t you just do everything in one test, I’m sure
you’ll be able to figure it out when it fails.
&lt;/p>
&lt;p>
b) There isn’t that much setup, I can just do the same thing I did in the last
test as setup!
&lt;/p>
&lt;p>
Lets pretend we don’t care about performance, I hope we can guarantee that the
first test won’t change and that the setup state of the second test won’t get
out of touch with reality!
&lt;/p>
&lt;p>&lt;strong>But wait, there’s another solutions…&lt;/strong>&lt;/p>
&lt;p></description></item><item><title>Contextualizing with DSLs</title><link>//www.brysgo.com/2014/12/19/contextualizing-with-dsls/</link><pubDate>Fri, 19 Dec 2014 18:40:31 +0000</pubDate><guid>//www.brysgo.com/2014/12/19/contextualizing-with-dsls/</guid><description>Why do we use domain specific languages? My first reaction to them when I started programming in the real world was to scorn them with the attitude that they introduce unnecessary complication for both the developer and the computer. What good could they possibly do? Like any programmer thrown into a stack, I faithfully used the established patterns, knowing that any divergence from the standard usually has a much worse effect than dealing with it.</description></item><item><title>Use your YAML fixtures as documentation</title><link>//www.brysgo.com/2014/12/10/use-your-yaml-fixtures-as-documentation/</link><pubDate>Wed, 10 Dec 2014 21:45:00 +0000</pubDate><guid>//www.brysgo.com/2014/12/10/use-your-yaml-fixtures-as-documentation/</guid><description>
&lt;p>
If you are writing an API sandbox with a local development tool, you will no
doubt need fixtures for your API’s modeling.
&lt;/p>
&lt;p>
It turns out those fixtures are a great example of how your API is modeled. If
you comment on those fixtures, they can be great documentation for the
perusing developer.</description></item><item><title>Voltrb first impressions</title><link>//www.brysgo.com/2014/12/04/voltrb-first-impressions/</link><pubDate>Thu, 04 Dec 2014 23:27:00 +0000</pubDate><guid>//www.brysgo.com/2014/12/04/voltrb-first-impressions/</guid><description>
&lt;p>What do you get when you cross meteorjs with rails?&lt;/p>
&lt;p>The answer is quite simply, voltrb.&lt;/p>
&lt;p>
Getting started is not quite as easy as meteor or rails, which isn’t
surprising considering how fresh it is.
&lt;/p>
&lt;p>
So far I built a search box that creates new items on submit, but searches
through existing items as you type. I’m building the site that will go here:
&lt;a href="http://www.procedur.al">http://www.procedur.al&lt;/a>.
&lt;/p>
&lt;p>
I love how you get default models and collections for each storage method and
you can optionally create models that are autoloaded if they exist. This
reminds me if ember, only I don’t have to leave ruby!</description></item><item><title>The wonderful distributed world wide web!</title><link>//www.brysgo.com/2014/12/01/the-wonderful-distributed-world-wide-web/</link><pubDate>Mon, 01 Dec 2014 23:05:17 +0000</pubDate><guid>//www.brysgo.com/2014/12/01/the-wonderful-distributed-world-wide-web/</guid><description>…umm, I mean let’s all use the same service so we don’t have to manage or own hardware. There are advantages and disadvantages to distributing the internet. One of the advantages initially were that it was the only way to host anything. There were no easy services for sharing content. There are of course many other advantages to the distribution of the internet, like fault tolerance, but those were quickly forgotten.</description></item><item><title>Commit to a single way</title><link>//www.brysgo.com/2014/11/26/commit-to-a-single-way/</link><pubDate>Wed, 26 Nov 2014 13:13:06 +0000</pubDate><guid>//www.brysgo.com/2014/11/26/commit-to-a-single-way/</guid><description>Software engineers are responsible for adding new and unforeseen complexity to established, carefully thought out systems. It tends to be a reflex when told to add complexity, that we special case the complexity and fall through to the system you had before. This works in many cases and is great if the complexity being added is a footnote that you don&amp;rsquo;t intend to come back to. Complexity that is essential to the long term success of your product needs to be &amp;ldquo;native.</description></item><item><title>Strategies for reviewing massive pull requests</title><link>//www.brysgo.com/2014/11/20/strategies-for-reviewing-massive-pull-requests/</link><pubDate>Thu, 20 Nov 2014 22:52:00 +0000</pubDate><guid>//www.brysgo.com/2014/11/20/strategies-for-reviewing-massive-pull-requests/</guid><description>
&lt;p>
Too many massive pull requests are a smell, but sometimes big pull requests
are a necessity. It is easy to come across a large pull request and
immediately reject it, but you shouldn’t be intimidated by the size of a PR.
&lt;/p>
&lt;p>
Your first job when reviewing such a PR is to identify why it is so large. Is
there a large piece of functionality being added or Is a common pattern in the
code being changed? Maybe the pull request is a large feature combined with
pattern changes.
&lt;/p>
&lt;p>
If it is the third, I would definitely ask for the PR to be broken up. There
is no reason to do a pattern change and new feature in one PR. Otherwise the
actions you take will depend largely on what the reason for the PR’s size is.</description></item><item><title>Why is consistency in code so difficult?</title><link>//www.brysgo.com/2014/11/19/why-is-consistency-in-code-so-difficult/</link><pubDate>Wed, 19 Nov 2014 22:39:00 +0000</pubDate><guid>//www.brysgo.com/2014/11/19/why-is-consistency-in-code-so-difficult/</guid><description>
&lt;p>
Why is it we can’t just agree on a pattern to use when programming and get
everything done already?
&lt;/p>
&lt;p>
The fact is that while language level stylistic differences are very easy to
agree on, the patterns in which you use the tools provided by the language
emerge proportional to the size of the system.
&lt;/p>
&lt;p>
So you can come to a new pattern, agree on it, come to the next, agree on it,
etc… but there will always be more patterns.
&lt;/p>
&lt;p>
Okay well, we can’t agree on patterns, at least we can agree on philosophies
for coming up with new patterns?</description></item><item><title>A RoseFactory by any other name...</title><link>//www.brysgo.com/2014/11/18/a-rosefactory-by-any-other-name/</link><pubDate>Tue, 18 Nov 2014 22:54:00 +0000</pubDate><guid>//www.brysgo.com/2014/11/18/a-rosefactory-by-any-other-name/</guid><description>
&lt;blockquote>
&lt;p>
There are only two hard things in Computer Science: cache invalidation and
naming things.
&lt;/p>
&lt;p>— Phil Karlton&lt;/p>
&lt;/blockquote>
&lt;p>
Lets hold on to cache invalidation for another post&lt;a
href="https://www.youtube.com/watch?v=g-4-gLlF0uw"
>…&lt;/a
>
&lt;/p>
&lt;p>
Naming things (or should I say labeling them&lt;a
href="https://www.youtube.com/watch?v=g-4-gLlF0uw"
>…&lt;/a
>) is a very hard problem.
&lt;/p>
&lt;h2>Why is it a hard problem?&lt;/h2>
&lt;p>
Consider this, imagine you are building a piece of IKEA furniture. You get all
the pieces in the box and you have to put them together. Now imagine that all
the pieces had a succinct description that you used to put them together. Now
imagine that you couldn’t see or feel the pieces and all you had to work with
were these descriptions.
&lt;/p>
&lt;p>
&lt;img
alt=""
src="http://photos1.blogger.com/blogger2/1715/1669/1600/larson-oct-1987.gif"
/>
&lt;/p>
&lt;p></description></item><item><title>OO code isn't spaghetti proof</title><link>//www.brysgo.com/2014/11/15/oo-code-isnt-spaghetti-proof/</link><pubDate>Sat, 15 Nov 2014 02:11:50 +0000</pubDate><guid>//www.brysgo.com/2014/11/15/oo-code-isnt-spaghetti-proof/</guid><description>Today I had another terrifying, tear swallowing pull request moment. It involved clearly abstracted pieces of our system being clearly and purposefully coupled. If this doesn&amp;rsquo;t bring you to your knees let me try and illustrate why this is so bad. You are the kind of developer that pardon my french, &amp;ldquo;gets shit done.&amp;rdquo; Because you are such a doer, you connect the first input with the desired output.</description></item><item><title>Ink/filepicker-rails doesn't preview my unsupported image format</title><link>//www.brysgo.com/2014/11/13/ink-filepicker-rails-doesnt-preview-my/</link><pubDate>Thu, 13 Nov 2014 19:30:18 +0000</pubDate><guid>//www.brysgo.com/2014/11/13/ink-filepicker-rails-doesnt-preview-my/</guid><description>First, before you go any further&amp;hellip; check to make sure the image you&amp;rsquo;re trying isn&amp;rsquo;t just broken. I visited the image in the browser and realized that the browser supported the format, so the broken preview had to be somewhere in filepicker. In my case I was using a(n) .ico file and since filepicker.io only supports post processing on .jpg and .pngI had to come up with a work around.</description></item><item><title>Machine Learning in Go</title><link>//www.brysgo.com/2013/11/23/machine-learning-in-go/</link><pubDate>Sat, 23 Nov 2013 21:53:42 +0000</pubDate><guid>//www.brysgo.com/2013/11/23/machine-learning-in-go/</guid><description>For a while now I have been curious about Go. There doesn&amp;rsquo;t seem to be much to it, but it is getting more and more popular. Another itch I&amp;rsquo;ve had for a really long time is to write my own machine learning/AI framework. After looking at Golang a bit more, I couldn&amp;rsquo;t shake the feeling that it would be the perfect language for my machine learning framework. I did some searching and while there were people talking about writing machine learning frameworks in Go, no one was actually doing it.</description></item><item><title>Look ma, I inspired a webcomic!</title><link>//www.brysgo.com/2013/10/23/look-ma-i-inspired-a-webcomic/</link><pubDate>Wed, 23 Oct 2013 10:52:02 +0000</pubDate><guid>//www.brysgo.com/2013/10/23/look-ma-i-inspired-a-webcomic/</guid><description>paircomix: Stop pronouncing my typos!
Never</description></item></channel></rss>