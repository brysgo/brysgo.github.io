<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>engineering on BRYSGO</title><link>//www.brysgo.com/tags/engineering/</link><description>Recent content in engineering on BRYSGO</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 07 Aug 2019 02:00:28 +0000</lastBuildDate><atom:link href="//www.brysgo.com/tags/engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>High Altitude Mass Volley</title><link>//www.brysgo.com/post/2019-08-07-high-altitude-mass-volley/</link><pubDate>Wed, 07 Aug 2019 02:00:28 +0000</pubDate><guid>//www.brysgo.com/post/2019-08-07-high-altitude-mass-volley/</guid><description>Preamble I have always been interested in space, but this idea for getting there cheaper has been brewing for a few years, and while I’ve yet to sit down and do the math, it has gotten to a place where it seems intuitive enough to work.
Before I go into the solution, let’s look at the problem. At present, out best way of getting to space involves stacking explosives as high as we can, sitting on top with a countdown, and hoping that we planned for all the eventualities.</description></item><item><title>Crystallize your abstractions carefully...</title><link>//www.brysgo.com/2016/06/21/crystallize-carfully/</link><pubDate>Tue, 21 Jun 2016 01:54:33 +0000</pubDate><guid>//www.brysgo.com/2016/06/21/crystallize-carfully/</guid><description>For as long as I&amp;rsquo;ve been a developer I have been reminded of the rule of three for refactoring and every time I hear it, I die a little inside.
If building a new abstraction is so painful, that it is easier to copy and paste large chunks of code, you need to rethink the way you are building your abstractions. Building the right abstractions isn&amp;rsquo;t just a time consuming distraction from building software, it is software engineering.</description></item><item><title>Imaginary Lines</title><link>//www.brysgo.com/2016/04/01/imaginary-lines/</link><pubDate>Fri, 01 Apr 2016 01:13:33 +0000</pubDate><guid>//www.brysgo.com/2016/04/01/imaginary-lines/</guid><description>If I had to sum up the job of a software engineer in laymen&amp;rsquo;s terms, I would tell you that we draw imaginary lines around imaginary concepts until those concepts can map to both a specific set of instructions for a machine and a common understanding for programmers.
Why am I stating the obvious? Well, it is quite simply to emphasize just how important it is where we draw those lines.</description></item><item><title>Commit to a single way</title><link>//www.brysgo.com/2014/11/26/commit-to-a-single-way/</link><pubDate>Wed, 26 Nov 2014 13:13:06 +0000</pubDate><guid>//www.brysgo.com/2014/11/26/commit-to-a-single-way/</guid><description>Software engineers are responsible for adding new and unforeseen complexity to established, carefully thought out systems. It tends to be a reflex when told to add complexity, that we special case the complexity and fall through to the system you had before. This works in many cases and is great if the complexity being added is a footnote that you don&amp;rsquo;t intend to come back to. Complexity that is essential to the long term success of your product needs to be &amp;ldquo;native.</description></item></channel></rss>