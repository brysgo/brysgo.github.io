<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react on BRYSGO</title><link>//www.brysgo.com/tags/react/</link><description>Recent content in react on BRYSGO</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Apr 2016 01:13:33 +0000</lastBuildDate><atom:link href="//www.brysgo.com/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Imaginary Lines</title><link>//www.brysgo.com/2016/04/01/imaginary-lines/</link><pubDate>Fri, 01 Apr 2016 01:13:33 +0000</pubDate><guid>//www.brysgo.com/2016/04/01/imaginary-lines/</guid><description>If I had to sum up the job of a software engineer in laymen&amp;rsquo;s terms, I would tell you that we draw imaginary lines around imaginary concepts until those concepts can map to both a specific set of instructions for a machine and a common understanding for programmers.
Why am I stating the obvious? Well, it is quite simply to emphasize just how important it is where we draw those lines.</description></item><item><title>React Native on Heroku</title><link>//www.brysgo.com/2015/07/26/react-native-on-heroku/</link><pubDate>Sun, 26 Jul 2015 00:09:33 +0000</pubDate><guid>//www.brysgo.com/2015/07/26/react-native-on-heroku/</guid><description>As a web developer doing iOS development with react native, I need a staging environment for the product manager to review changes to the app.
On the web, that means using Heroku, but with a react native app it is a bit more complicated.
My react native app has two components, the packager (for serving the client code) and the server (for interacting with the app).
Heroku only lets one process bind to an external port, so it wasn&amp;rsquo;t easy to do without creating two heroku apps.</description></item><item><title>Will Relay replace Flux?</title><link>//www.brysgo.com/2015/07/25/relay-vs-flux/</link><pubDate>Sat, 25 Jul 2015 12:59:33 +0000</pubDate><guid>//www.brysgo.com/2015/07/25/relay-vs-flux/</guid><description>Relay is out in preview! Have a look.
When people talk about Relay they think of it as the server-client link in the Facebook stack, but is that really all it is?
Flux still has a place on the client because you need to manage temporary app state, right?
I think it doesn&amp;rsquo;t. Flux is an architecture for unidirectional data flow that separates out input from the user and the server so that it can react without getting tangled up.</description></item><item><title>Why I'm Excited for Facebook's Relay and GraphQL</title><link>//www.brysgo.com/2015/07/08/why-relay/</link><pubDate>Wed, 08 Jul 2015 12:59:33 +0000</pubDate><guid>//www.brysgo.com/2015/07/08/why-relay/</guid><description>Relay is out in preview! Have a look.
I want to tell you in as few words as possible why I am so excited to get my hands on Relay and GraphQL.
React is widely popular because it is simple and declarative, making it very deterministic and easy to work with. React is also fully composable, making it imensly powerful with high potential for writing reusable code.
Relay is a mirror image of React, except instead of composing beautiful views for the web and native mobile devices using JSX, you can compose data from your database for your views using graphql.</description></item><item><title>Searching for an Isomorphic Reactiflux Stack</title><link>//www.brysgo.com/2015/06/17/isomorphic-react-flux-stack/</link><pubDate>Wed, 17 Jun 2015 10:07:43 +0000</pubDate><guid>//www.brysgo.com/2015/06/17/isomorphic-react-flux-stack/</guid><description>Now that Relay is out in preview, it will probably replace Flux entirely.
Why React? A few months ago, the release of React Native by Facebook convinced me to make the leap to React.
I spent a while working on a React Native app and quickly learned that I needed to bring in Flux. After watching a few videos and reading a few blogs, I added my own implementation of flux to my react native app.</description></item></channel></rss>