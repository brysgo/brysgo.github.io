<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thinking on Personal website and blog</title><link>https://www.brysgo.com/tags/thinking/</link><description>Recent content in thinking on Personal website and blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Dec 2017 02:00:28 +0000</lastBuildDate><atom:link href="https://www.brysgo.com/tags/thinking/index.xml" rel="self" type="application/rss+xml"/><item><title>The Dangers of Idiomatic Programming</title><link>https://www.brysgo.com/post/2017-12-07-idiom-shmidiom/</link><pubDate>Thu, 07 Dec 2017 02:00:28 +0000</pubDate><guid>https://www.brysgo.com/post/2017-12-07-idiom-shmidiom/</guid><description>What does it mean to be idiomatic?
&amp;ldquo;Of, relating to, or conforming to idiom&amp;rdquo; - Merriam-Webster
So what is an idiom?
&amp;ldquo;The syntactical, grammatical, or structural form peculiar to a language&amp;rdquo; - Merriam-Webster
When we talk about idiomatic programming, we are talking about doing things because it is &amp;ldquo;the way&amp;rdquo; to do them, or because so-and-so says this is a rule that canâ€™t be broken.
Why is it important to see past these idioms and understand why they are &amp;ldquo;the way?</description></item></channel></rss>